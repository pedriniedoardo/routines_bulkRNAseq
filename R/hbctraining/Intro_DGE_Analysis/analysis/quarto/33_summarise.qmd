---
title: "Summarizing results from the Wald test"
html:
    embed-resources: true
editor: visual
---

## Learning Objectives 

* Evaluate the number of differentially expressed genes produced for each comparison
* Construct R objects containing significant genes from each comparison


## Summarizing results

To summarize the results table, a handy function in DESeq2 is `summary()`. Confusingly it has the same name as the function used to inspect data frames. This function when called with a DESeq results table as input, will summarize the results using a default threshold of padj < 0.1. However, since we had set the `alpha` argument to 0.05 when creating our results table  threshold: FDR < 0.05 (padj/FDR is used even though the output says `p-value < 0.05`). Let's start with the OE vs control results:

```{r}
#| warning: false
#| message: false

# load the libraries
library(DESeq2)
library(tidyverse)
library(RColorBrewer)
library(pheatmap)
library(DEGreport)
library(tximport)
library(ggplot2)
library(ggrepel)
library(limma)
library(ashr)
library(ComplexUpset)
library(UpSetR)
```

```{r}
# read in the results objects
res_tableOE <- readRDS("../../out/object/res_tableOE.rds")

# Summarize results
summary(res_tableOE, alpha = 0.05)
```

In addition to the number of genes up- and down-regulated at the default threshold, **the function also reports the number of genes that were tested (genes with non-zero total read count), and the number of genes not included in multiple test correction due to a low mean count**.


## Extracting significant differentially expressed genes

Let's first create variables that contain our threshold criteria. We will only be using the adjusted p-values in our criteria:

```{r}
### Set thresholds
padj.cutoff <- 0.05
```

We can easily subset the results table to only include those that are significant using the `filter()` function, but first we will convert the results table into a tibble:

```{r}
# Create a tibble of results
res_tableOE_tb <- res_tableOE %>%
  data.frame() %>%
  rownames_to_column(var="gene") %>% 
  as_tibble()

res_tableOE_tb
```

Now we can subset that table to only keep the significant genes using our pre-defined thresholds:

```{r}
# Subset the tibble to keep only significant genes
sigOE <- res_tableOE_tb %>%
        dplyr::filter(padj < padj.cutoff)

# Take a quick look at this tibble
sigOE
```

***

**Exercise**

**MOV10 Differential Expression Analysis: Control versus Knockdown**

1. Using the same p-adjusted threshold as above (`padj.cutoff < 0.05`), subset `res_tableKD` to report the number of genes that are up- and down-regulated in Mov10_knockdown compared to control.

```{r}
# read in the object
txi <- readRDS("../../out/object/txi.rds")
meta <- readRDS("../../out/object/metadata.rds")

## Create DESeq2Dataset object
dds <- DESeqDataSetFromTximport(txi, colData = meta, design = ~ sampletype)
dds

## Run analysis
dds <- DESeq(dds)

# check the coefficients based on the results
resultsNames(dds)

# build the design object
sampletype <- meta$sampletype
design <- model.matrix(~sampletype)

# print the model.matrix
design

contrast <- makeContrasts(MOV10KO_vs_CTRL = sampletypeMOV10_knockdown,
                          MOV10OE_vs_CTRL = sampletypeMOV10_overexpression,
                          MOV10KO_vs_MOV10OE = sampletypeMOV10_knockdown - sampletypeMOV10_overexpression,
                          levels = design)

contrast

# try to extract the same table from the makeContrasts construct
res_tableKO <- results(dds, contrast=contrast[,"MOV10KO_vs_CTRL"], alpha = 0.05)

# save the result object
saveRDS(res_tableKO, "../../out/object/res_tableKO.rds")

res_tableKO_tb <- res_tableKO %>%
  data.frame() %>%
  rownames_to_column(var="gene") %>% 
  as_tibble()

res_tableKO_tb

sigKO <- res_tableKO_tb %>%
  dplyr::filter(padj < padj.cutoff)
```

2. How many genes are differentially expressed in the Knockdown compared to Control? How does this compare to the overexpression significant gene list (in terms of numbers)?

```{r}
# overexpression
sigOE %>%
  mutate(direction = sign(log2FoldChange)) %>%
  group_by(direction) %>%
  summarise(n = n())

# knock-out
sigKO %>%
  mutate(direction = sign(log2FoldChange)) %>%
  group_by(direction) %>%
  summarise(n = n())

```

Attempt exploration of the common genes across the two tables

```{r}
# library(ComplexUpset)
# library(UpSetR)

# generate a list for the set of genes either up or down
list_sigOE <- sigOE %>%
  mutate(table = "sigOE") %>%
  mutate(direction = case_when(log2FoldChange>0~"POS",
                               T~"NEG")) %>%
  mutate(term = paste(table,direction,sep = "_")) %>%
  split(f=.$term) %>%
  lapply(function(x){
    x %>%
      pull("gene")
  })

list_sigKO <- sigKO %>%
  mutate(table = "sigKO") %>%
  mutate(direction = case_when(log2FoldChange>0~"POS",
                               T~"NEG")) %>%
  mutate(term = paste(table,direction,sep = "_")) %>%
  split(f=.$term) %>%
  lapply(function(x){
    x %>%
      pull("gene")
  })

# concatenate the two lists
list_all <- c(list_sigOE,list_sigKO)
str(list_all)

# generate the plot
ComplexUpset::upset(fromList(list_all),colnames(fromList(list_all)),wrap=T) + ggtitle("significant genes")
```

```{r}
# pull all the genes from each term
df1 <- lapply(list_all,function(x){
  data.frame(gene = x)
}) %>% 
  bind_rows(.id = "path")

head(df1)

# pull all the unique genes
df2 <- data.frame(gene=unique(unlist(list_all)))
head(df2)

# generate the intersections
df_int <- lapply(df2$gene,function(x){
  # pull the name of the intersections
  intersection <- df1 %>% 
    dplyr::filter(gene==x) %>% 
    arrange(path) %>% 
    pull("path") %>% 
    paste0(collapse = "|")
  
  # build the dataframe
  data.frame(gene = x,int = intersection)
}) %>% 
  bind_rows()

head(df_int,n=20)

# show the intersections
df_int %>% 
  group_by(int) %>% 
  summarise(n=n()) %>% 
  arrange(desc(n))
```

***

Now that we have extracted the significant results, we are ready for visualization!
